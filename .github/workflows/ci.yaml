name: "Continuous Integration"

on:
  pull_request:
  merge_group:
  push:
    branches:
      - master
      - 'releases/**'

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}
  cancel-in-progress: false

jobs:
  nix-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5
      - uses: nixbuild/nix-quick-install-action@v32
      - id: set-matrix
        name: Generate Nix Matrix
        run: |
          set -euo pipefail

          matrix="$(nix eval --json '.#githubActions.matrix')"
          echo "matrix=${matrix}" >> "$GITHUB_OUTPUT"

  nix-check:
    needs: nix-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix: ${{ fromJSON(needs.nix-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v5
      - uses: nixbuild/nix-quick-install-action@v32
      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('flake.*') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
      - run: nix build -L ".#${{ matrix.attr }}" --keep-going

  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v5
      - uses: nixbuild/nix-quick-install-action@v32
      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('flake.*') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-

      - name: Load Nix Development Shell
        uses: nicknovitski/nix-develop@v1

      - name: Prepare Zephyr Project workspace
        run: |
          west init -l . 
          west config --global update.narrow true
          west update

      - name: Twister Tests
        id: twister-tests
        run: ./scripts/run-tests --clobber-output  --inline-logs -v -N -M

      - name: Merge Test Results
        if: steps.twister-tests.conclusion == 'failure'
        run: |
          pip3 install junitparser junit2html
          junitparser merge **/twister.xml junit.xml
          junit2html junit.xml junit.html

      - name: Upload Unit Test Results in HTML
        if: steps.twister-tests.conclusion == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: HTML Unit Test Results
          if-no-files-found: ignore
          path: |
            junit.html

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: steps.twister-tests.conclusion == 'failure'
        with:
          check_name: Unit Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: "**/twister.xml"
